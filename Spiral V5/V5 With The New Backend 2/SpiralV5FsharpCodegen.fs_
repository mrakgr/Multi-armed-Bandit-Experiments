module Spiral.Codegen

open Spiral.Lang
open System.Collections.Generic
open System.Text

type ProgramNode =
| Statement of string
| Indent
| Dedent
| Statements of ResizeArray<ProgramNode>

let exp x = String.concat "" x

let process_statements (statements: ResizeArray<ProgramNode>) =
    let rec process_statement (code: StringBuilder,ind as state) statement =
        match statement with
        | Statement x -> [|String.replicate ind " "; x; "\n"|] |> exp |> code.Append, ind
        | Indent -> code, ind+4
        | Dedent -> code, ind-4
        | Statements x -> process_statements state x
    and process_statements state (statements: ResizeArray<ProgramNode>) =
        Seq.fold process_statement state statements
    process_statements (StringBuilder(),0) statements
    |> fun (code,ind) -> code.ToString()

let print_program ((main, globals): TypedExpr * LangGlobals) =
    let get_tag =
        let mutable i = 0L
        fun () -> i <- i+1L; i

    let def_proc (d: Dictionary<_,_>) t = 
        match d.TryGetValue t with
        | true, v -> v
        | false, _ ->
            let v = get_tag()
            d.Add(t,v)
            v

    let tuple_definitions = d0()
    let tuple_tag x = def_proc tuple_definitions x
    let print_tuple' v = sprintf "Tuple%i" v
    let print_tuple = function
        | [] -> "unit"
        | t -> tuple_tag t |> print_tuple'

    let env_ty_definitions = d0()
    let env_ty_tag x = def_proc env_ty_definitions x
    let print_env_ty' v = sprintf "EnvTy%i" v
    let print_env_ty t = env_ty_tag t |> print_env_ty'

    let union_ty_definitions = d0()
    let union_ty_tag x = def_proc union_ty_definitions x
    let print_union_ty' v = sprintf "UnionTy%i" v
    let print_union_ty set = union_ty_tag set |> print_union_ty'

    let print_rec_ty v = sprintf "RecTy%i" v

    let state (buffer: Buf) x = buffer.Add <| Statement x
    let enter' (buffer: Buf) f = buffer.Add Indent; f(); buffer.Add Dedent
    let enter (buffer: Buf) f = 
        enter' buffer <| fun _ -> 
            match f() with
            | "" -> ()
            | s -> state buffer s

    let rec is_unit = function
        | VVT (N []) | TypeConstructorT _ | LitT _ | ForCastT _ | DotNetAssemblyT _ | DotNetTypeRuntimeT _ -> true
        | UnionT _ | RecT _ | DotNetTypeInstanceT _ | ClosureT _ | PrimT _ -> false
        | ArrayT(N(_,t)) -> is_unit t
        | TyEnvT env -> Map.forall (fun _ -> is_unit) env
        | VVT (N t) -> List.forall is_unit t

    let (|Unit|_|) x = if is_unit x then Some () else None

    let rec print_type = function
        | Unit -> "unit"
        | TyEnvT env -> print_env_ty env
        | VVT (N t) -> print_tuple t
        | UnionT (N t) -> print_union_ty t
        | RecT t -> print_rec_ty t.Symbol
        | ArrayT(N(DotNetReference,t)) -> sprintf "%s ref" (print_type t)
        | ArrayT(N(DotNetHeap,t)) -> sprintf "%s []" (print_type t)
        | ArrayT _ -> failwith "Not implemented."
        | DotNetTypeInstanceT (N t) -> print_dotnet_instance_type t
        | ClosureT(N(a,b)) -> 
            let a = tuple_field_ty a |> List.map print_type |> String.concat " * "
            sprintf "(%s) -> %s" a (print_type b)
        | PrimT x ->
            match x with
            | Int8T -> "int8"
            | Int16T -> "int16"
            | Int32T -> "int32"
            | Int64T -> "int64"
            | UInt8T -> "uint8"
            | UInt16T -> "uint16"
            | UInt32T -> "uint32"
            | UInt64T -> "uint64"
            | Float32T -> "float32"
            | Float64T -> "float64"
            | BoolT -> "bool"
            | StringT -> "string"
            | CharT -> "char"
        | TypeConstructorT _ | LitT _ | ForCastT _ | DotNetAssemblyT _ | DotNetTypeRuntimeT _ -> 
            failwith "Should be covered in Unit."
                

    and print_dotnet_instance_type (x: System.Type) =
        if x.GenericTypeArguments.Length > 0 then
            [|
            x.Namespace
            "." 
            x.Name.Split '`' |> Array.head
            "<"
            Array.map (dotnet_type_to_ty >> print_type) x.GenericTypeArguments |> String.concat ","
            ">"
            |] |> String.concat null
        else
            [|x.Namespace; "."; x.Name|] |> String.concat null

    let print_tyv (tag,ty) = 
        match ty with
        | Unit -> failwith "Unit type variables should never be printed."
        | _ -> sprintf "var_%i" tag
    let print_tyv_with_type (tag,ty as v) = sprintf "(%s: %s)" (print_tyv v) (print_type ty)
    let print_method tag = sprintf "method_%i" tag

    let print_args args = 
        Set.toList args |> List.filter (snd >> is_unit >> not)
        |> List.map print_tyv_with_type |> String.concat ", "

    let print_union_case tag i = sprintf "Union%iCase%i" tag i
    let print_rec_tuple tag = sprintf "Rec%iTuple" tag
    let print_rec_case tag i = sprintf "Rec%iCase%i" tag i

    let rec codegen (buffer: Buf) expr =
        let state = state buffer
        let enter' = enter' buffer
        let enter = enter buffer
       
        let print_value = function
            | LitInt8 x -> sprintf "%iy" x
            | LitInt16 x -> sprintf "%is" x
            | LitInt32 x -> sprintf "%i" x
            | LitInt64 x -> sprintf "%iL" x
            | LitUInt8 x -> sprintf "%iuy" x
            | LitUInt16 x -> sprintf "%ius" x
            | LitUInt32 x -> sprintf "%iu" x
            | LitUInt64 x -> sprintf "%iUL" x
            | LitFloat32 x -> sprintf "%ff" x
            | LitFloat64 x -> sprintf "%f" x
            | LitString x -> sprintf "\"%s\"" x
            | LitChar x -> 
                match x with
                | '\n' -> @"\n"
                | '\t' -> @"\t"
                | '\r' -> @"\r"
                | x -> string x
                |> sprintf "'%s'"
            | LitBool x -> if x then "true" else "false"

        let codegen x = codegen buffer x

        let print_if t f =
            match t with
            | Unit -> f (); ""
            | t ->
                let if_var = sprintf "(if_var_%i: %s)" (get_tag()) (print_type t)
                sprintf "let %s =" if_var |> state
                enter' <| fun _ -> f()
                if_var
        
        let rec if_ cond tr fl =
            let enter f =
                enter <| fun _ ->
                    match f () with
                    | "" -> "()"
                    | x -> x
                
            print_if (get_type tr) <| fun _ ->
                sprintf "if %s then" (codegen cond) |> state
                enter <| fun _ -> codegen tr
                "else" |> state
                enter <| fun _ -> codegen fl

        let make_struct l on_empty on_rest =
            Seq.choose (fun x -> let x = codegen x in if x = "" then None else Some x) l
            |> String.concat ", "
            |> function
                | "" -> on_empty()
                | x -> on_rest x

        let if_not_unit ty f = if is_unit ty then "" else f()

        let print_case_tuple' t l name = make_struct l (fun _ -> name) (sprintf "%s(%s(%s))" name (print_tuple t))
        let print_case_tuple l name = print_case_tuple' (List.map get_type l) l name

        let union_process_tuple f l (tys: Set<_>) =
            let l_tys = List.map get_type l
            let l_vvt = vvt l_tys
            let i = Seq.findIndex ((=) l_vvt) tys
            print_case_tuple' l_tys l (f i)

        let print_case_var l name = make_struct l (fun _ -> name) (sprintf "%s(%s)" name)
        let union_process_var f (v, v_ty) (tys: Set<_>) =
            let i = Seq.findIndex ((=) v_ty) tys
            print_case_var [v] (f i)

        let (|DotNetPrintedArgs|) x = List.map codegen x |> List.filter ((<>) "") |> String.concat ", "

        let array_create (TyTuple size) = function
            | Unit -> ""
            | ArrayT(N(_,t)) ->
                let x = List.map codegen size |> String.concat "*"
                sprintf "Array.zeroCreate<%s> (System.Convert.ToInt32(%s))" (print_type t) x
            | _ -> failwith "impossible"

        let reference_create = function
            | TyType Unit -> ""
            | x -> sprintf "(ref %s)" (codegen x)

        let array_index (TyTuple size) ar (TyTuple idx) =
            match ar with
            | TyType Unit -> ""
            | _ ->
                let size, idx = List.map codegen size, List.map codegen idx
                // Print assertions for multidimensional arrays.
                // For 1d arrays, the .NET runtime does the checking.
                match size with
                | _ :: _ :: _ ->
                    List.iter2 (fun s i -> 
                        let cond = sprintf "%s < %s && %s >= 0L" i s i
                        // I am worried about code size blowup due to the string in sprintf so I'll leave the message out.
                        //let message = """sprintf "Specified argument was out of the range of valid values in array indexing. index=%i size=%i" """
                        sprintf "if (%s) = false then raise <| System.ArgumentOutOfRangeException(\"%s\")" cond i |> state
                        ) size idx
                | _ -> ()

                let rec index_first = function
                    | _ :: s :: sx, i :: ix -> index_rest (sprintf "%s * %s" i s) (sx, ix)
                    | [_], [i] -> i
                    | _ -> "0"
                and index_rest prev = function
                    | s :: sx, i :: ix -> index_rest (sprintf "(%s + %s) * %s" prev i s) (sx, ix)
                    | [], [i] -> sprintf "%s + %s" prev i
                    | _ -> failwith "Invalid state."

                sprintf "%s.[int32 (%s)]" (codegen ar) (index_first (size, idx))

        let reference_index = function
            | TyType Unit -> ""
            | x -> sprintf "(!%s)" (codegen x)

        let array_set size ar idx r = 
            match ar with
            | TyType Unit -> ()
            | _ -> sprintf "%s <- %s" (array_index size ar idx) (codegen r) |> state
        let reference_set l r = 
            match l with
            | TyType Unit -> ()
            | _ -> sprintf "%s := %s" (codegen l) (codegen r) |> state

        let string_length str = sprintf "(int64 %s.Length)" (codegen str)
        let string_index str idx = sprintf "%s.[int32 (%s)]" (codegen str) (codegen idx)

        match expr with
        | TyTag (_, Unit) | TyV (_, Unit) -> ""
        | TyTag v -> print_tyv v
        | TyOp(If,[cond;tr;fl],t) -> if_ cond tr fl
        | TyLet(LetInvisible, _, _, rest, _) -> codegen rest
        | TyLet(_,(_,Unit),b,rest,_) ->
            match b with
            | TyOp(ArraySet,[TyOp(ArrayIndex,[size;ar;idx],_);b],_) ->
                match get_type ar with
                | ArrayT(N(DotNetReference,_)) -> reference_set ar b
                | ArrayT(N(DotNetHeap,_)) -> array_set size ar idx b
                | _ -> failwith "impossible"
            | _ ->
                let b = codegen b
                if b <> "" then sprintf "%s" b |> state
            codegen rest
        | TyLet(_,tyv,b,rest,_) -> sprintf "let %s = %s" (print_tyv_with_type tyv) (codegen b) |> state; codegen rest
        | TyLit x -> print_value x
        | TyMemoizedExpr(MemoMethod,fv,_,tag,_) ->
            let method_name = print_method tag
            sprintf "%s(%s)" method_name (print_args !fv)
        | TyMemoizedExpr(MemoClosure args,fv,rev_renamer,tag,_) -> 
            let method_name = print_method tag
            let fv = !fv - (renamer_apply_pool rev_renamer args)
            if fv.IsEmpty then method_name
            else sprintf "%s(%s)" method_name (print_args fv)
        | TyV(x & TyType t, UnionT (N tys)) -> union_process_var (print_union_case (union_ty_tag tys)) (x,t) tys
        | TyV(x & TyType t, RecT rect) ->
            match rect.Expression with
            | UnionT (N tys) -> union_process_var (print_rec_case rect.Symbol) (x,t) tys
            | _ -> failwith "Only UnionT can be a recursive var type."
        | TyVV(l,VVT (N t)) -> make_struct l (fun _ -> "") (fun args -> sprintf "%s(%s)" (print_tuple t) args)
        | TyVV(l,UnionT (N tys)) -> union_process_tuple (print_union_case (union_ty_tag tys)) l tys
        | TyVV(l,RecT rect) -> 
            match rect.Expression with
            | VVT _ -> print_case_tuple l (print_rec_tuple rect.Symbol)
            | UnionT (N tys) -> union_process_tuple (print_rec_case rect.Symbol) l tys
            | _ -> failwith "Only VVT and UnionT are recursive tuple types."
        | TyVV(_,_) -> failwith "TyVV's type can only by VVT, UnionT and RecT."
        | TyEnv(env_term, TyEnvT env_ty) ->
            Map.toArray env_term
            |> Array.map snd
            |> fun x -> make_struct x (fun _ -> "") (fun args -> sprintf "%s(%s)" (print_env_ty env_ty) args)
        | TyEnv(env_term,_) -> failwith "Can't be any other type."
        | TyOp(op,args,t) ->
            match op, args with
            | Apply,[a;b] ->
                // Apply during codegen is only used for applying closures.
                // There is one level of flattening in the outer arguments.
                // The reason for this is the symmetry between the F# and the Cuda side.
                let b = tuple_field b |> List.map codegen |> String.concat ", "
                sprintf "%s(%s)" (codegen a) b
            | Case,v :: cases ->
                print_if t <| fun _ ->
                    let print_case = 
                        match get_type v with
                        | RecT rect -> print_rec_case rect.Symbol
                        | UnionT (N tys) -> print_union_case (union_ty_tag tys)
                        | _ -> failwith "impossible"

                    sprintf "match %s with" (codegen v) |> state
                    let print_case i = function
                        | case & TyType Unit -> sprintf "| %s ->" (print_case i) |> state
                        | case -> sprintf "| %s(%s) ->" (print_case i) (codegen case) |> state
                    let rec loop i = function
                        | case :: body :: rest -> 
                            print_case i case
                            enter <| fun _ -> codegen body
                            loop (i+1) rest
                        | [] -> ()
                        | _ -> failwith "The cases should always be in pairs."
                    loop 0 cases

            | ArrayCreate,[a] -> array_create a t
            | ReferenceCreate,[a] -> reference_create a
            | ArrayIndex,[a;b & TyType(ArrayT(N (DotNetHeap,_)));c] -> array_index a b c
            | ArrayIndex,[a;b & TyType(ArrayT(N (DotNetReference,_)));c] -> reference_index b
            | StringIndex,[str;idx] -> string_index str idx
            | StringLength,[str] -> string_length str

            // Primitive operations on expressions.
            | Add,[a;b] -> sprintf "(%s + %s)" (codegen a) (codegen b)
            | Sub,[a;b] -> sprintf "(%s - %s)" (codegen a) (codegen b)
            | Mult,[a;b] -> sprintf "(%s * %s)" (codegen a) (codegen b)
            | Div,[a;b] -> sprintf "(%s / %s)" (codegen a) (codegen b)
            | Mod,[a;b] -> sprintf "(%s %% %s)" (codegen a) (codegen b)
            | LT,[a;b] -> sprintf "(%s < %s)" (codegen a) (codegen b)
            | LTE,[a;b] -> sprintf "(%s <= %s)" (codegen a) (codegen b)
            | EQ,[a;b] -> sprintf "(%s = %s)" (codegen a) (codegen b)
            | NEQ,[a;b] -> sprintf "(%s != %s)" (codegen a) (codegen b)
            | GT,[a;b] -> sprintf "(%s > %s)" (codegen a) (codegen b)
            | GTE,[a;b] -> sprintf "(%s >= %s)" (codegen a) (codegen b)
            | And,[a;b] -> sprintf "(%s && %s)" (codegen a) (codegen b)
            | Or,[a;b] -> sprintf "(%s || %s)" (codegen a) (codegen b)

            | ShiftLeft,[x;y] -> sprintf "(%s << %s)" (codegen x) (codegen y)
            | ShiftRight,[x;y] -> sprintf "(%s >> %s)" (codegen x) (codegen y)

    //        | ShuffleXor,[x;y],_) -> sprintf "cub::ShuffleXor(%s, %s)" (codegen x) (codegen y)
    //        | ShuffleUp,[x;y],_) -> sprintf "cub::ShuffleUp(%s, %s)" (codegen x) (codegen y)
    //        | ShuffleDown,[x;y],_) -> sprintf "cub::ShuffleDown(%s, %s)" (codegen x) (codegen y)
    //        | ShuffleIndex,[x;y],_) -> sprintf "cub::ShuffleIndex(%s, %s)" (codegen x) (codegen y)

            | Neg,[a] -> sprintf "(-%s)" (codegen a)
            | VVIndex,[a;b] -> if_not_unit t <| fun _ -> sprintf "%s.mem_%s" (codegen a) (codegen b)
            | EnvUnseal,[r; TyLit (LitString k)] -> if_not_unit t <| fun _ -> sprintf "%s.mem_%s" (codegen r) k
            | Log,[x] -> sprintf "log(%s)" (codegen x)
            | Exp,[x] -> sprintf "exp(%s)" (codegen x)
            | Tanh,[x] -> sprintf "tanh(%s)" (codegen x)

            | DotNetTypeConstruct,[TyTuple (DotNetPrintedArgs args)] ->
                match t with 
                | DotNetTypeInstanceT (N instance_type) -> sprintf "%s(%s)" (print_dotnet_instance_type instance_type) args
                | _ -> failwith "impossible"
            | DotNetTypeCallMethod,[v; TyTuple [TypeString method_name; TyTuple (DotNetPrintedArgs method_args)]] ->
                match v with
                | TyType (DotNetTypeRuntimeT (N t)) -> sprintf "%s.%s(%s)" (print_dotnet_instance_type t) method_name method_args
                | _ -> sprintf "%s.%s(%s)" (codegen v) method_name method_args
            // Cuda kernel constants
    //        | Syncthreads,[],_) -> state "syncthreads();"; ""

            | x -> failwithf "Missing TyOp case. %A" x
        | x -> failwithf "The match cases were incomplete. Got: %A" x

    let print_rec_definition prefix (buffer: Buf) ty tag =
        let state = state buffer
        let enter' = enter' buffer
        let enter = enter buffer

        sprintf "%s %s =" prefix (print_rec_ty tag) |> state
        match ty with
        | VVT _ & Unit -> "| " + print_rec_tuple tag |> state
        | VVT _ -> sprintf "| %s of %s" (print_rec_tuple tag) (print_type ty) |> state
        | UnionT (N tys) ->
            let tys = Set.toList tys
            enter' <| fun _ ->
                List.iteri (fun i -> function
                    | Unit -> "| " + print_rec_case tag i |> state
                    | x -> sprintf "| %s of %s" (print_rec_case tag i) (print_type x) |> state) tys
        | _ -> failwith "Only VVT and UnionT are recursive types."

    let print_union_definition prefix (buffer: Buf) tys tag =
        let state = state buffer
        let enter' = enter' buffer
        let enter = enter buffer

        let tys = Set.toList tys

        sprintf "%s %s =" prefix (print_union_ty' tag) |> state
        enter' <| fun _ ->
            List.iteri (fun i -> function
                | Unit -> "| " + print_union_case tag i |> state
                | x -> sprintf "| %s of %s" (print_union_case tag i) (print_type x) |> state) tys

    let print_struct_definition prefix (buffer: Buf) iter fold name tys tag =
        let state = state buffer
        let enter' = enter' buffer
        let enter = enter buffer

        let args sep f =
            fold (fun s k ty -> 
                match ty with
                | Unit -> s
                | _ -> f k :: s) [] tys
            |> List.rev
            |> String.concat sep

        let args_declaration = args ", " <| fun k -> sprintf "arg_mem_%s" k
        let args_mapping = args "; " <| fun k -> sprintf "mem_%s = arg_mem_%s" k k

        sprintf "%s %s =" prefix name |> state
        enter' <| fun _ -> 
            "struct" |> state
            iter (fun k ty -> 
                match ty with
                | Unit -> ()
                | _ -> sprintf "val mem_%s: %s" k (print_type ty) |> state) tys
            
            sprintf "new(%s) = {%s}" args_declaration args_mapping |> state
            "end" |> state

    let print_method_definition (buffer: Buf) is_first (memo_type,body,tag,fv) = 
        let state = state buffer
        let enter' = enter' buffer
        let enter = enter buffer

        let prefix = if is_first then "let rec" else "and"
        let method_name = print_method tag
        match memo_type with
        | MemoClosure args -> 
            let fv = !fv - args |> fun fv -> if fv.IsEmpty then "" else sprintf "(%s) " (print_args fv)
            sprintf "%s %s %s(%s): %s =" prefix method_name fv (print_args args) (print_type (get_type body))
            
        | MemoMethod -> sprintf "%s %s(%s): %s =" prefix method_name (print_args !fv) (print_type (get_type body))
        |> state

        enter' <| fun _ -> 
            match codegen buffer body with
            | "" -> ()
            | x -> state x
            match get_type body with
            | Unit -> "()" |> state
            | _ -> ()

    let method_buffer = ResizeArray()
    let definitions_buffer = ResizeArray()

    globals.memoized_methods |> Seq.fold (fun is_first x -> 
        match x.Value with
        | MemoMethodDone (memo_type, e, tag, args) -> print_method_definition method_buffer is_first (memo_type, e, tag, args); false
        | _ -> is_first) true |> ignore
    codegen method_buffer main |> state method_buffer // Can't forget the non-method

    let type_prefix =
        let mutable prefix = false
        fun () -> if prefix then "and" else prefix <- true; "type"

    for x in globals.memoized_methods do
        match x.Value with
        | MemoType (RecT rect) ->
            let tag, ty = rect.Symbol, rect.Expression
            print_rec_definition (type_prefix()) definitions_buffer ty tag
        | _ -> ()

    for x in union_ty_definitions do
        let tys,tag = x.Key, x.Value
        print_union_definition (type_prefix()) definitions_buffer tys tag

    for x in env_ty_definitions do
        let tys, tag = x.Key, x.Value
        let tuple_name = print_env_ty' tag
        print_struct_definition (type_prefix()) definitions_buffer Map.iter Map.fold tuple_name tys tag

    let safe_print (def: Dictionary<_,_>) f =
        let printed = h0()
        let rec loop () =
            let prev_count = def.Count
            let f x =
                if printed.Contains x then ()
                else printed.Add x |> ignore; f x
            Seq.iter f (Seq.toArray def)
            if prev_count <> def.Count then loop ()
            else ()
        loop ()

    safe_print tuple_definitions <| fun x ->
        let tys, tag = x.Key, x.Value
        let tuple_name = print_tuple' tag
        let fold f s l = List.fold (fun (i,s) ty -> i+1, f s (string i) ty) (0,s) l |> snd
        let iter f l = List.iteri (fun i x -> f (string i) x) l
        print_struct_definition (type_prefix()) definitions_buffer iter fold tuple_name tys tag
    
    // Definitions need a pass through the AST in order to be memoized. Hence they are printed first in 
    // actual code while here in the codegen that is done last. Here I just swap the buffers.
    definitions_buffer.AddRange method_buffer
    process_statements definitions_buffer

let spiral_codegen aux_modules main_module = 
    let rec parse_modules xs on_fail ret =
        let p x on_fail ret =
            match Spiral.Parse.spiral_parse x with
            | Success(r,_,_) -> ret r
            | Failure(er,_,_) -> on_fail er
        match xs with
        | (name,code as x) :: xs -> 
            p x on_fail <| fun r -> 
                parse_modules xs on_fail <| fun rs ->
                    l name r rs |> ret
        | [] -> p main_module on_fail ret

    let code =
        let d = Dictionary()
        let f (name,code: string) = d.Add(name, code.Split [|'\n'|])
        Seq.iter f aux_modules
        f main_module
        d
     
    let copy_to_clipboard x =
        let path = @"C:\Users\Marko\Documents\Visual Studio 2015\Projects\ConsoleApplication4\ConsoleApplication4\Program.fs"
        printfn "Copied the code to: %s" path
        System.IO.File.WriteAllText(path,x)
        x

    parse_modules aux_modules Fail (fun r -> 
        spiral_typecheck code r Fail (print_program >> copy_to_clipboard >> Succ))




