module SpiralExample.Main
let cuda_kernels = """
extern "C" {
    
}
"""

type Tuple0 =
    struct
    val mem_0: int64
    val mem_1: int64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
let rec method_0((var_0: (int64 [])), (var_1: int64)): unit =
    if (var_1 < 6L) then
        var_0.[int32 var_1] <- (var_1 + 1L)
        let (var_2: int64) = (var_1 + 1L)
        method_0((var_0: (int64 [])), (var_2: int64))
    else
        ()
and method_1((var_0: (int64 [])), (var_1: int64), (var_2: int64), (var_3: int64)): int64 =
    if (var_2 < var_1) then
        let (var_4: int64) = var_0.[int32 var_2]
        let (var_5: int64) = (var_3 + var_4)
        let (var_6: int64) = (var_2 + 1L)
        method_1((var_0: (int64 [])), (var_1: int64), (var_6: int64), (var_5: int64))
    else
        var_3
and method_2((var_0: (int64 [])), (var_1: int64), (var_2: int64)): int64 =
    if (var_1 >= 0L) then
        let (var_3: int64) = var_0.[int32 var_1]
        let (var_4: int64) = (var_3 * var_2)
        let (var_5: int64) = (var_1 + -1L)
        method_2((var_0: (int64 [])), (var_5: int64), (var_4: int64))
    else
        var_2
let (var_0: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(6L))
let (var_1: int64) = 0L
method_0((var_0: (int64 [])), (var_1: int64))
let (var_2: int64) = 0L
let (var_3: int64) = var_0.LongLength
let (var_4: int64) = 0L
let (var_5: int64) = method_1((var_0: (int64 [])), (var_3: int64), (var_4: int64), (var_2: int64))
let (var_6: int64) = 1L
let (var_7: int64) = var_0.LongLength
let (var_8: int64) = (var_7 - 1L)
let (var_9: int64) = method_2((var_0: (int64 [])), (var_8: int64), (var_6: int64))
Tuple0(var_5, var_9)
