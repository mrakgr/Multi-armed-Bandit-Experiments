module SpiralExample.Main
let cuda_kernels = """
extern "C" {
    
}
"""

type Union0 =
    | Union0Case0
    | Union0Case1
    | Union0Case2
and EnvHeap1 =
    {
    mem_0: (bool [])
    mem_1: int64
    }
and Tuple2 =
    struct
    val mem_0: Tuple5
    val mem_1: Rec4
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvHeapMutable3 =
    {
    mutable mem_0: (Tuple2 [])
    mutable mem_1: int64
    mutable mem_2: int64
    }
and Rec4 =
    | Rec4Case0
    | Rec4Case1 of Tuple6
and Tuple5 =
    struct
    val mem_0: int64
    val mem_1: int64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Tuple6 =
    struct
    val mem_0: string
    val mem_1: Rec4
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Union7 =
    | Union7Case0 of Tuple8
    | Union7Case1
and Tuple8 =
    struct
    val mem_0: string
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
let rec method_1((var_0: bool), (var_1: string), (var_2: int64)): unit =
    let (var_4: bool) =
        if (var_2 >= 0L) then
            let (var_3: int64) = (int64 var_1.Length)
            (var_2 < var_3)
        else
            false
    if var_4 then
        let (var_5: char) = var_1.[int32 var_2]
        let (var_6: bool) =
            if (var_5 >= '0') then
                (var_5 <= '9')
            else
                false
        let (var_7: int64) = (var_2 + 1L)
        if var_6 then
            let (var_8: int64) = System.Convert.ToInt64(var_5)
            let (var_9: int64) = System.Convert.ToInt64('0')
            let (var_10: int64) = (var_8 - var_9)
            method_2((var_0: bool), (var_1: string), (var_10: int64), (var_7: int64))
        else
            (failwith "pint64")
    else
        (failwith "pint64")
and method_2((var_0: bool), (var_1: string), (var_2: int64), (var_3: int64)): unit =
    let (var_5: bool) =
        if (var_3 >= 0L) then
            let (var_4: int64) = (int64 var_1.Length)
            (var_3 < var_4)
        else
            false
    if var_5 then
        let (var_6: char) = var_1.[int32 var_3]
        let (var_7: bool) =
            if (var_6 >= '0') then
                (var_6 <= '9')
            else
                false
        let (var_8: int64) = (var_3 + 1L)
        if var_7 then
            let (var_9: int64) = System.Convert.ToInt64(var_6)
            let (var_10: int64) = System.Convert.ToInt64('0')
            let (var_11: int64) = (var_9 - var_10)
            let (var_12: bool) =
                if (var_2 = 922337203685477580L) then
                    (var_11 <= 7L)
                else
                    false
            let (var_13: bool) =
                if var_12 then
                    true
                else
                    (var_2 < 922337203685477580L)
            if var_13 then
                let (var_14: int64) = (var_2 * 10L)
                let (var_15: int64) = (var_14 + var_11)
                method_2((var_0: bool), (var_1: string), (var_15: int64), (var_8: int64))
            else
                (failwith "integer overflow")
        else
            let (var_16: int64) =
                if var_0 then
                    var_2
                else
                    (-var_2)
            let (var_17: int64) = 0L
            method_3((var_16: int64), (var_1: string), (var_17: int64), (var_3: int64))
    else
        let (var_18: int64) =
            if var_0 then
                var_2
            else
                (-var_2)
        let (var_19: int64) = 0L
        method_3((var_18: int64), (var_1: string), (var_19: int64), (var_3: int64))
and method_3((var_0: int64), (var_1: string), (var_2: int64), (var_3: int64)): unit =
    let (var_4: int64) = (var_2 + 1L)
    let (var_6: bool) =
        if (var_3 >= 0L) then
            let (var_5: int64) = (int64 var_1.Length)
            (var_3 < var_5)
        else
            false
    if var_6 then
        let (var_7: char) = var_1.[int32 var_3]
        let (var_9: bool) =
            if (var_7 = ' ') then
                true
            else
                if (var_7 = '\n') then
                    true
                else
                    (var_7 = '\r')
        let (var_10: int64) = (var_3 + 1L)
        if var_9 then
            method_3((var_0: int64), (var_1: string), (var_4: int64), (var_10: int64))
        else
            let (var_12: bool) =
                if (var_3 >= 0L) then
                    let (var_11: int64) = (int64 var_1.Length)
                    (var_3 < var_11)
                else
                    false
            if var_12 then
                let (var_13: bool) = ('-' = var_7)
                if var_13 then
                    let (var_14: bool) = false
                    method_4((var_14: bool), (var_0: int64), (var_1: string), (var_10: int64))
                else
                    let (var_15: bool) = true
                    method_4((var_15: bool), (var_0: int64), (var_1: string), (var_3: int64))
            else
                let (var_16: bool) = true
                method_4((var_16: bool), (var_0: int64), (var_1: string), (var_3: int64))
    else
        let (var_18: bool) =
            if (var_3 >= 0L) then
                let (var_17: int64) = (int64 var_1.Length)
                (var_3 < var_17)
            else
                false
        if var_18 then
            let (var_19: char) = var_1.[int32 var_3]
            let (var_20: bool) = ('-' = var_19)
            let (var_21: int64) = (var_3 + 1L)
            if var_20 then
                let (var_22: bool) = false
                method_4((var_22: bool), (var_0: int64), (var_1: string), (var_21: int64))
            else
                let (var_23: bool) = true
                method_4((var_23: bool), (var_0: int64), (var_1: string), (var_3: int64))
        else
            let (var_24: bool) = true
            method_4((var_24: bool), (var_0: int64), (var_1: string), (var_3: int64))
and method_4((var_0: bool), (var_1: int64), (var_2: string), (var_3: int64)): unit =
    let (var_5: bool) =
        if (var_3 >= 0L) then
            let (var_4: int64) = (int64 var_2.Length)
            (var_3 < var_4)
        else
            false
    if var_5 then
        let (var_6: char) = var_2.[int32 var_3]
        let (var_7: bool) =
            if (var_6 >= '0') then
                (var_6 <= '9')
            else
                false
        let (var_8: int64) = (var_3 + 1L)
        if var_7 then
            let (var_9: int64) = System.Convert.ToInt64(var_6)
            let (var_10: int64) = System.Convert.ToInt64('0')
            let (var_11: int64) = (var_9 - var_10)
            method_5((var_0: bool), (var_1: int64), (var_2: string), (var_11: int64), (var_8: int64))
        else
            (failwith "pint64")
    else
        (failwith "pint64")
and method_5((var_0: bool), (var_1: int64), (var_2: string), (var_3: int64), (var_4: int64)): unit =
    let (var_6: bool) =
        if (var_4 >= 0L) then
            let (var_5: int64) = (int64 var_2.Length)
            (var_4 < var_5)
        else
            false
    if var_6 then
        let (var_7: char) = var_2.[int32 var_4]
        let (var_8: bool) =
            if (var_7 >= '0') then
                (var_7 <= '9')
            else
                false
        let (var_9: int64) = (var_4 + 1L)
        if var_8 then
            let (var_10: int64) = System.Convert.ToInt64(var_7)
            let (var_11: int64) = System.Convert.ToInt64('0')
            let (var_12: int64) = (var_10 - var_11)
            let (var_13: bool) =
                if (var_3 = 922337203685477580L) then
                    (var_12 <= 7L)
                else
                    false
            let (var_14: bool) =
                if var_13 then
                    true
                else
                    (var_3 < 922337203685477580L)
            if var_14 then
                let (var_15: int64) = (var_3 * 10L)
                let (var_16: int64) = (var_15 + var_12)
                method_5((var_0: bool), (var_1: int64), (var_2: string), (var_16: int64), (var_9: int64))
            else
                (failwith "integer overflow")
        else
            let (var_17: int64) =
                if var_0 then
                    var_3
                else
                    (-var_3)
            let (var_18: int64) = 0L
            method_6((var_17: int64), (var_1: int64), (var_2: string), (var_18: int64), (var_4: int64))
    else
        let (var_19: int64) =
            if var_0 then
                var_3
            else
                (-var_3)
        let (var_20: int64) = 0L
        method_6((var_19: int64), (var_1: int64), (var_2: string), (var_20: int64), (var_4: int64))
and method_6((var_0: int64), (var_1: int64), (var_2: string), (var_3: int64), (var_4: int64)): unit =
    let (var_5: int64) = (var_3 + 1L)
    let (var_7: bool) =
        if (var_4 >= 0L) then
            let (var_6: int64) = (int64 var_2.Length)
            (var_4 < var_6)
        else
            false
    if var_7 then
        let (var_8: char) = var_2.[int32 var_4]
        let (var_10: bool) =
            if (var_8 = ' ') then
                true
            else
                if (var_8 = '\n') then
                    true
                else
                    (var_8 = '\r')
        let (var_11: int64) = (var_4 + 1L)
        if var_10 then
            method_6((var_0: int64), (var_1: int64), (var_2: string), (var_5: int64), (var_11: int64))
        else
            let (var_13: bool) =
                if (var_4 >= 0L) then
                    let (var_12: int64) = (int64 var_2.Length)
                    (var_4 < var_12)
                else
                    false
            if var_13 then
                let (var_14: bool) = ('-' = var_8)
                if var_14 then
                    let (var_15: bool) = false
                    method_7((var_15: bool), (var_1: int64), (var_2: string), (var_11: int64))
                else
                    let (var_16: bool) = true
                    method_7((var_16: bool), (var_1: int64), (var_2: string), (var_4: int64))
            else
                let (var_17: bool) = true
                method_7((var_17: bool), (var_1: int64), (var_2: string), (var_4: int64))
    else
        let (var_19: bool) =
            if (var_4 >= 0L) then
                let (var_18: int64) = (int64 var_2.Length)
                (var_4 < var_18)
            else
                false
        if var_19 then
            let (var_20: char) = var_2.[int32 var_4]
            let (var_21: bool) = ('-' = var_20)
            let (var_22: int64) = (var_4 + 1L)
            if var_21 then
                let (var_23: bool) = false
                method_7((var_23: bool), (var_1: int64), (var_2: string), (var_22: int64))
            else
                let (var_24: bool) = true
                method_7((var_24: bool), (var_1: int64), (var_2: string), (var_4: int64))
        else
            let (var_25: bool) = true
            method_7((var_25: bool), (var_1: int64), (var_2: string), (var_4: int64))
and method_7((var_0: bool), (var_1: int64), (var_2: string), (var_3: int64)): unit =
    let (var_5: bool) =
        if (var_3 >= 0L) then
            let (var_4: int64) = (int64 var_2.Length)
            (var_3 < var_4)
        else
            false
    if var_5 then
        let (var_6: char) = var_2.[int32 var_3]
        let (var_7: bool) =
            if (var_6 >= '0') then
                (var_6 <= '9')
            else
                false
        let (var_8: int64) = (var_3 + 1L)
        if var_7 then
            let (var_9: int64) = System.Convert.ToInt64(var_6)
            let (var_10: int64) = System.Convert.ToInt64('0')
            let (var_11: int64) = (var_9 - var_10)
            method_8((var_0: bool), (var_1: int64), (var_2: string), (var_11: int64), (var_8: int64))
        else
            (failwith "pint64")
    else
        (failwith "pint64")
and method_8((var_0: bool), (var_1: int64), (var_2: string), (var_3: int64), (var_4: int64)): unit =
    let (var_6: bool) =
        if (var_4 >= 0L) then
            let (var_5: int64) = (int64 var_2.Length)
            (var_4 < var_5)
        else
            false
    if var_6 then
        let (var_7: char) = var_2.[int32 var_4]
        let (var_8: bool) =
            if (var_7 >= '0') then
                (var_7 <= '9')
            else
                false
        let (var_9: int64) = (var_4 + 1L)
        if var_8 then
            let (var_10: int64) = System.Convert.ToInt64(var_7)
            let (var_11: int64) = System.Convert.ToInt64('0')
            let (var_12: int64) = (var_10 - var_11)
            let (var_13: bool) =
                if (var_3 = 922337203685477580L) then
                    (var_12 <= 7L)
                else
                    false
            let (var_14: bool) =
                if var_13 then
                    true
                else
                    (var_3 < 922337203685477580L)
            if var_14 then
                let (var_15: int64) = (var_3 * 10L)
                let (var_16: int64) = (var_15 + var_12)
                method_8((var_0: bool), (var_1: int64), (var_2: string), (var_16: int64), (var_9: int64))
            else
                (failwith "integer overflow")
        else
            let (var_17: int64) =
                if var_0 then
                    var_3
                else
                    (-var_3)
            let (var_18: int64) = 0L
            method_9((var_17: int64), (var_1: int64), (var_2: string), (var_18: int64), (var_4: int64))
    else
        let (var_19: int64) =
            if var_0 then
                var_3
            else
                (-var_3)
        let (var_20: int64) = 0L
        method_9((var_19: int64), (var_1: int64), (var_2: string), (var_20: int64), (var_4: int64))
and method_9((var_0: int64), (var_1: int64), (var_2: string), (var_3: int64), (var_4: int64)): unit =
    let (var_5: int64) = (var_3 + 1L)
    let (var_7: bool) =
        if (var_4 >= 0L) then
            let (var_6: int64) = (int64 var_2.Length)
            (var_4 < var_6)
        else
            false
    if var_7 then
        let (var_8: char) = var_2.[int32 var_4]
        let (var_10: bool) =
            if (var_8 = ' ') then
                true
            else
                if (var_8 = '\n') then
                    true
                else
                    (var_8 = '\r')
        let (var_11: int64) = (var_4 + 1L)
        if var_10 then
            method_9((var_0: int64), (var_1: int64), (var_2: string), (var_5: int64), (var_11: int64))
        else
            let (var_12: bool) = (var_1 >= 0L)
            if var_12 then
                let (var_14: ((Union0 []) [])) = Array.zeroCreate<(Union0 [])> (System.Convert.ToInt32(var_1))
                let (var_15: int64) = 0L
                method_10((var_14: ((Union0 []) [])), (var_1: int64), (var_2: string), (var_15: int64), (var_12: bool), (var_4: int64))
            else
                (failwith "n in parse array must be >= 0")
    else
        let (var_16: bool) = (var_1 >= 0L)
        if var_16 then
            let (var_18: ((Union0 []) [])) = Array.zeroCreate<(Union0 [])> (System.Convert.ToInt32(var_1))
            let (var_19: int64) = 0L
            method_10((var_18: ((Union0 []) [])), (var_1: int64), (var_2: string), (var_19: int64), (var_16: bool), (var_4: int64))
        else
            (failwith "n in parse array must be >= 0")
and method_10((var_0: ((Union0 []) [])), (var_1: int64), (var_2: string), (var_3: int64), (var_4: bool), (var_5: int64)): unit =
    let (var_6: bool) = (var_3 < var_1)
    if var_6 then
        let (var_7: int64) = (var_3 + 1L)
        if var_4 then
            let (var_8: (Union0 [])) = Array.zeroCreate<Union0> (System.Convert.ToInt32(var_1))
            let (var_9: int64) = 0L
            method_11((var_8: (Union0 [])), (var_0: ((Union0 []) [])), (var_3: int64), (var_7: int64), (var_1: int64), (var_4: bool), (var_2: string), (var_9: int64), (var_5: int64))
        else
            (failwith "n in parse array must be >= 0")
    else
        let (var_10: int64) = 0L
        method_13((var_0: ((Union0 []) [])), (var_1: int64), (var_10: int64))
and method_11((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_7: int64), (var_8: int64)): unit =
    let (var_9: bool) = (var_7 < var_4)
    if var_9 then
        let (var_10: int64) = (var_7 + 1L)
        let (var_12: bool) =
            if (var_8 >= 0L) then
                let (var_11: int64) = (int64 var_6.Length)
                (var_8 < var_11)
            else
                false
        if var_12 then
            let (var_13: char) = var_6.[int32 var_8]
            let (var_14: bool) = ('-' = var_13)
            let (var_15: int64) = (var_8 + 1L)
            if var_14 then
                var_0.[int32 var_7] <- Union0Case0
                method_11((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_10: int64), (var_15: int64))
            else
                let (var_17: bool) =
                    if (var_8 >= 0L) then
                        let (var_16: int64) = (int64 var_6.Length)
                        (var_8 < var_16)
                    else
                        false
                if var_17 then
                    let (var_18: bool) = ('p' = var_13)
                    if var_18 then
                        var_0.[int32 var_7] <- Union0Case2
                        method_11((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_10: int64), (var_15: int64))
                    else
                        let (var_20: bool) =
                            if (var_8 >= 0L) then
                                let (var_19: int64) = (int64 var_6.Length)
                                (var_8 < var_19)
                            else
                                false
                        if var_20 then
                            let (var_21: bool) = ('m' = var_13)
                            if var_21 then
                                var_0.[int32 var_7] <- Union0Case1
                                method_11((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_10: int64), (var_15: int64))
                            else
                                (failwith "char")
                        else
                            (failwith "string index out of bounds")
                else
                    let (var_23: bool) =
                        if (var_8 >= 0L) then
                            let (var_22: int64) = (int64 var_6.Length)
                            (var_8 < var_22)
                        else
                            false
                    if var_23 then
                        let (var_24: bool) = ('m' = var_13)
                        if var_24 then
                            var_0.[int32 var_7] <- Union0Case1
                            method_11((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_10: int64), (var_15: int64))
                        else
                            (failwith "char")
                    else
                        (failwith "string index out of bounds")
        else
            let (var_26: bool) =
                if (var_8 >= 0L) then
                    let (var_25: int64) = (int64 var_6.Length)
                    (var_8 < var_25)
                else
                    false
            if var_26 then
                let (var_27: char) = var_6.[int32 var_8]
                let (var_28: bool) = ('p' = var_27)
                let (var_29: int64) = (var_8 + 1L)
                if var_28 then
                    var_0.[int32 var_7] <- Union0Case2
                    method_11((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_10: int64), (var_29: int64))
                else
                    let (var_31: bool) =
                        if (var_8 >= 0L) then
                            let (var_30: int64) = (int64 var_6.Length)
                            (var_8 < var_30)
                        else
                            false
                    if var_31 then
                        let (var_32: bool) = ('m' = var_27)
                        if var_32 then
                            var_0.[int32 var_7] <- Union0Case1
                            method_11((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_10: int64), (var_29: int64))
                        else
                            (failwith "char")
                    else
                        (failwith "string index out of bounds")
            else
                let (var_34: bool) =
                    if (var_8 >= 0L) then
                        let (var_33: int64) = (int64 var_6.Length)
                        (var_8 < var_33)
                    else
                        false
                if var_34 then
                    let (var_35: char) = var_6.[int32 var_8]
                    let (var_36: bool) = ('m' = var_35)
                    let (var_37: int64) = (var_8 + 1L)
                    if var_36 then
                        var_0.[int32 var_7] <- Union0Case1
                        method_11((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_10: int64), (var_37: int64))
                    else
                        (failwith "char")
                else
                    (failwith "string index out of bounds")
    else
        let (var_38: int64) = 0L
        method_12((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_38: int64), (var_8: int64))
and method_13((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64)): unit =
    if (var_2 < var_1) then
        let (var_3: int64) = 0L
        method_14((var_0: ((Union0 []) [])), (var_2: int64), (var_1: int64), (var_3: int64))
    else
        (failwith "Current position not found.")
and method_12((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_7: int64), (var_8: int64)): unit =
    let (var_9: int64) = (var_7 + 1L)
    let (var_11: bool) =
        if (var_8 >= 0L) then
            let (var_10: int64) = (int64 var_6.Length)
            (var_8 < var_10)
        else
            false
    if var_11 then
        let (var_12: char) = var_6.[int32 var_8]
        let (var_14: bool) =
            if (var_12 = ' ') then
                true
            else
                if (var_12 = '\n') then
                    true
                else
                    (var_12 = '\r')
        let (var_15: int64) = (var_8 + 1L)
        if var_14 then
            method_12((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_9: int64), (var_15: int64))
        else
            var_1.[int32 var_2] <- var_0
            method_10((var_1: ((Union0 []) [])), (var_4: int64), (var_6: string), (var_3: int64), (var_5: bool), (var_8: int64))
    else
        var_1.[int32 var_2] <- var_0
        method_10((var_1: ((Union0 []) [])), (var_4: int64), (var_6: string), (var_3: int64), (var_5: bool), (var_8: int64))
and method_14((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_3: int64)): unit =
    if (var_3 < var_2) then
        let (var_4: (Union0 [])) = var_0.[int32 var_1]
        let (var_5: Union0) = var_4.[int32 var_3]
        match var_5 with
        | Union0Case0 ->
            let (var_6: int64) = (var_3 + 1L)
            method_14((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_6: int64))
        | Union0Case1 ->
            let (var_7: int64) = (var_3 + 1L)
            method_15((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_7: int64), (var_3: int64))
        | Union0Case2 ->
            let (var_8: int64) = (var_3 + 1L)
            method_36((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_8: int64), (var_3: int64))
    else
        let (var_9: int64) = (var_1 + 1L)
        method_13((var_0: ((Union0 []) [])), (var_2: int64), (var_9: int64))
and method_15((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64)): unit =
    if (var_3 < var_2) then
        let (var_5: (Union0 [])) = var_0.[int32 var_1]
        let (var_6: Union0) = var_5.[int32 var_3]
        match var_6 with
        | Union0Case0 ->
            let (var_7: int64) = (var_3 + 1L)
            method_15((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_7: int64), (var_4: int64))
        | Union0Case1 ->
            let (var_8: int64) = (var_3 + 1L)
            method_15((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_8: int64), (var_3: int64))
        | Union0Case2 ->
            method_35((var_1: int64), (var_4: int64), (var_2: int64), (var_3: int64))
    else
        let (var_9: int64) = (var_1 + 1L)
        method_16((var_0: ((Union0 []) [])), (var_2: int64), (var_9: int64), (var_1: int64), (var_4: int64))
and method_36((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64)): unit =
    if (var_3 < var_2) then
        let (var_5: (Union0 [])) = var_0.[int32 var_1]
        let (var_6: Union0) = var_5.[int32 var_3]
        match var_6 with
        | Union0Case0 ->
            let (var_7: int64) = (var_3 + 1L)
            method_36((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_7: int64), (var_4: int64))
        | Union0Case1 ->
            method_35((var_1: int64), (var_3: int64), (var_2: int64), (var_4: int64))
        | Union0Case2 ->
            let (var_8: int64) = (var_3 + 1L)
            method_36((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_8: int64), (var_3: int64))
    else
        let (var_9: int64) = (var_1 + 1L)
        method_37((var_0: ((Union0 []) [])), (var_2: int64), (var_9: int64), (var_1: int64), (var_4: int64))
and method_35((var_0: int64), (var_1: int64), (var_2: int64), (var_3: int64)): unit =
    let (var_4: int64) = (var_2 - 1L)
    let (var_5: int64) = (var_4 + 1L)
    let (var_6: int64) =
        if (0L > var_5) then
            0L
        else
            var_5
    let (var_7: int64) =
        if (0L > var_5) then
            0L
        else
            var_5
    let (var_8: int64) = (var_7 * var_6)
    let (var_9: (bool [])) = Array.zeroCreate<bool> (System.Convert.ToInt32(var_8))
    let (var_10: int64) = 0L
    let (var_11: int64) = 0L
    let (var_12: int64) = method_19((var_6: int64), (var_9: (bool [])), (var_4: int64), (var_11: int64), (var_10: int64))
    let (var_13: EnvHeap1) = ({mem_0 = (var_9: (bool [])); mem_1 = (var_4: int64)} : EnvHeap1)
    let (var_14: (bool [])) = var_13.mem_0
    let (var_15: int64) = var_13.mem_1
    let (var_16: bool) =
        if (var_1 >= 0L) then
            (var_1 <= var_15)
        else
            false
    if var_16 then
        ()
    else
        (failwith "Argument out of bounds.")
    let (var_17: int64) = (var_15 + 1L)
    let (var_18: int64) =
        if (0L > var_17) then
            0L
        else
            var_17
    let (var_19: bool) =
        if (var_0 >= 0L) then
            (var_0 <= var_15)
        else
            false
    if var_19 then
        ()
    else
        (failwith "Argument out of bounds.")
    let (var_20: int64) = (var_18 * var_0)
    let (var_21: int64) = (var_1 + var_20)
    var_14.[int32 var_21] <- true
    let (var_22: string) = "UP"
    let (var_23: string) = "DOWN"
    let (var_24: string) = "LEFT"
    let (var_25: string) = "RIGHT"
    let (var_26: int64) = 0L
    let (var_27: int64) = 0L
    let (var_28: (Tuple2 [])) = Array.zeroCreate<Tuple2> (System.Convert.ToInt32(16L))
    let (var_29: EnvHeapMutable3) = ({mem_0 = (var_28: (Tuple2 [])); mem_1 = (var_26: int64); mem_2 = (var_27: int64)} : EnvHeapMutable3)
    let (var_30: Rec4) = Rec4Case0
    method_22((var_29: EnvHeapMutable3), (var_0: int64), (var_1: int64), (var_30: Rec4))
    method_26((var_23: string), (var_13: EnvHeap1), (var_2: int64), (var_3: int64), (var_0: int64), (var_29: EnvHeapMutable3), (var_24: string), (var_25: string), (var_22: string))
and method_16((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64)): unit =
    if (var_2 < var_1) then
        let (var_5: int64) = 0L
        method_17((var_0: ((Union0 []) [])), (var_2: int64), (var_1: int64), (var_5: int64), (var_3: int64), (var_4: int64))
    else
        (failwith "Current position not found.")
and method_37((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64)): unit =
    if (var_2 < var_1) then
        let (var_5: int64) = 0L
        method_38((var_0: ((Union0 []) [])), (var_2: int64), (var_1: int64), (var_5: int64), (var_3: int64), (var_4: int64))
    else
        (failwith "Current position not found.")
and method_19((var_0: int64), (var_1: (bool [])), (var_2: int64), (var_3: int64), (var_4: int64)): int64 =
    if (var_3 <= var_2) then
        let (var_5: int64) = 0L
        let (var_6: int64) = method_20((var_3: int64), (var_1: (bool [])), (var_2: int64), (var_5: int64), (var_4: int64))
        let (var_7: int64) = (var_4 + var_0)
        let (var_8: int64) = (var_3 + 1L)
        method_19((var_0: int64), (var_1: (bool [])), (var_2: int64), (var_8: int64), (var_7: int64))
    else
        var_4
and method_22((var_0: EnvHeapMutable3), (var_1: int64), (var_2: int64), (var_3: Rec4)): unit =
    let (var_4: int64) = var_0.mem_1
    let (var_5: int64) = var_0.mem_2
    let (var_6: (Tuple2 [])) = var_0.mem_0
    var_6.[int32 var_5] <- Tuple2(Tuple5(var_1, var_2), var_3)
    let (var_7: int64) = var_6.LongLength
    let (var_8: int64) = (var_5 + 1L)
    let (var_9: int64) =
        if (var_8 = var_7) then
            0L
        else
            var_8
    if (var_4 = var_9) then
        let (var_10: int64) = (var_7 * 3L)
        let (var_11: int64) = (var_10 / 2L)
        let (var_12: int64) = (var_11 + 3L)
        let (var_13: (Tuple2 [])) = Array.zeroCreate<Tuple2> (System.Convert.ToInt32(var_12))
        method_23((var_6: (Tuple2 [])), (var_13: (Tuple2 [])), (var_4: int64), (var_7: int64))
        let (var_14: int64) = 0L
        method_25((var_6: (Tuple2 [])), (var_13: (Tuple2 [])), (var_4: int64), (var_7: int64), (var_14: int64))
        var_0.mem_1 <- 0L
        var_0.mem_2 <- var_7
        var_0.mem_0 <- var_13
    else
        var_0.mem_2 <- var_9
and method_26((var_0: string), (var_1: EnvHeap1), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: EnvHeapMutable3), (var_6: string), (var_7: string), (var_8: string)): unit =
    let (var_9: Tuple2) = method_27((var_5: EnvHeapMutable3))
    let (var_10: Tuple5) = var_9.mem_0
    let (var_11: Rec4) = var_9.mem_1
    method_28((var_1: EnvHeap1), (var_2: int64), (var_3: int64), (var_4: int64), (var_8: string), (var_5: EnvHeapMutable3), (var_0: string), (var_6: string), (var_7: string), (var_10: Tuple5), (var_11: Rec4))
and method_17((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64)): unit =
    if (var_3 < var_2) then
        let (var_6: (Union0 [])) = var_0.[int32 var_1]
        let (var_7: Union0) = var_6.[int32 var_3]
        match var_7 with
        | Union0Case0 ->
            let (var_8: int64) = (var_3 + 1L)
            method_17((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_8: int64), (var_4: int64), (var_5: int64))
        | Union0Case1 ->
            let (var_9: int64) = (var_3 + 1L)
            method_15((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_9: int64), (var_3: int64))
        | Union0Case2 ->
            method_18((var_4: int64), (var_5: int64), (var_2: int64), (var_3: int64), (var_1: int64))
    else
        let (var_10: int64) = (var_1 + 1L)
        method_16((var_0: ((Union0 []) [])), (var_2: int64), (var_10: int64), (var_4: int64), (var_5: int64))
and method_38((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64)): unit =
    if (var_3 < var_2) then
        let (var_6: (Union0 [])) = var_0.[int32 var_1]
        let (var_7: Union0) = var_6.[int32 var_3]
        match var_7 with
        | Union0Case0 ->
            let (var_8: int64) = (var_3 + 1L)
            method_38((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_8: int64), (var_4: int64), (var_5: int64))
        | Union0Case1 ->
            method_18((var_1: int64), (var_3: int64), (var_2: int64), (var_5: int64), (var_4: int64))
        | Union0Case2 ->
            let (var_9: int64) = (var_3 + 1L)
            method_36((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_9: int64), (var_3: int64))
    else
        let (var_10: int64) = (var_1 + 1L)
        method_37((var_0: ((Union0 []) [])), (var_2: int64), (var_10: int64), (var_4: int64), (var_5: int64))
and method_20((var_0: int64), (var_1: (bool [])), (var_2: int64), (var_3: int64), (var_4: int64)): int64 =
    if (var_3 <= var_2) then
        var_1.[int32 var_4] <- false
        let (var_5: int64) = (var_4 + 1L)
        let (var_6: int64) = (var_3 + 1L)
        method_20((var_0: int64), (var_1: (bool [])), (var_2: int64), (var_6: int64), (var_5: int64))
    else
        var_4
and method_23((var_0: (Tuple2 [])), (var_1: (Tuple2 [])), (var_2: int64), (var_3: int64)): unit =
    if (var_2 < var_3) then
        let (var_4: Tuple2) = var_0.[int32 var_2]
        var_1.[int32 0L] <- var_4
        let (var_5: int64) = (var_2 + 1L)
        method_24((var_0: (Tuple2 [])), (var_1: (Tuple2 [])), (var_2: int64), (var_3: int64), (var_5: int64))
    else
        ()
and method_25((var_0: (Tuple2 [])), (var_1: (Tuple2 [])), (var_2: int64), (var_3: int64), (var_4: int64)): unit =
    if (var_4 < var_2) then
        let (var_5: int64) = (var_3 - var_2)
        let (var_6: Tuple2) = var_0.[int32 var_4]
        var_1.[int32 (var_5 + var_4)] <- var_6
        let (var_7: int64) = (var_4 + 1L)
        method_25((var_0: (Tuple2 [])), (var_1: (Tuple2 [])), (var_2: int64), (var_3: int64), (var_7: int64))
    else
        ()
and method_27((var_0: EnvHeapMutable3)): Tuple2 =
    let (var_1: int64) = var_0.mem_1
    let (var_2: int64) = var_0.mem_2
    let (var_3: (Tuple2 [])) = var_0.mem_0
    let (var_4: bool) = (var_1 <> var_2)
    if var_4 then
        ()
    else
        (failwith "Cannot dequeue past the end of the queue.")
    let (var_5: int64) = var_3.LongLength
    let (var_6: int64) = (var_1 + 1L)
    let (var_7: int64) =
        if (var_6 = var_5) then
            0L
        else
            var_6
    var_0.mem_1 <- var_7
    var_3.[int32 var_1]
and method_28((var_0: EnvHeap1), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: string), (var_5: EnvHeapMutable3), (var_6: string), (var_7: string), (var_8: string), (var_9: Tuple5), (var_10: Rec4)): unit =
    let (var_11: int64) = var_9.mem_0
    let (var_12: int64) = var_9.mem_1
    let (var_13: int64) = (var_11 - 1L)
    let (var_14: bool) =
        if (var_13 >= 0L) then
            (var_13 < var_1)
        else
            false
    let (var_16: bool) =
        if var_14 then
            if (var_12 >= 0L) then
                (var_12 < var_1)
            else
                false
        else
            false
    let (var_26: bool) =
        if var_16 then
            let (var_17: (bool [])) = var_0.mem_0
            let (var_18: int64) = var_0.mem_1
            let (var_19: bool) =
                if (var_12 >= 0L) then
                    (var_12 <= var_18)
                else
                    false
            if var_19 then
                ()
            else
                (failwith "Argument out of bounds.")
            let (var_20: int64) = (var_18 + 1L)
            let (var_21: int64) =
                if (0L > var_20) then
                    0L
                else
                    var_20
            let (var_22: bool) =
                if (var_13 >= 0L) then
                    (var_13 <= var_18)
                else
                    false
            if var_22 then
                ()
            else
                (failwith "Argument out of bounds.")
            let (var_23: int64) = (var_21 * var_13)
            let (var_24: int64) = (var_12 + var_23)
            let (var_25: bool) = var_17.[int32 var_24]
            (var_25 = false)
        else
            false
    if var_26 then
        let (var_27: bool) =
            if (var_13 = var_3) then
                (var_12 = var_2)
            else
                false
        if var_27 then
            method_29((var_4: string), (var_10: Rec4))
        else
            let (var_28: (bool [])) = var_0.mem_0
            let (var_29: int64) = var_0.mem_1
            let (var_30: bool) =
                if (var_12 >= 0L) then
                    (var_12 <= var_29)
                else
                    false
            if var_30 then
                ()
            else
                (failwith "Argument out of bounds.")
            let (var_31: int64) = (var_29 + 1L)
            let (var_32: int64) =
                if (0L > var_31) then
                    0L
                else
                    var_31
            let (var_33: bool) =
                if (var_13 >= 0L) then
                    (var_13 <= var_29)
                else
                    false
            if var_33 then
                ()
            else
                (failwith "Argument out of bounds.")
            let (var_34: int64) = (var_32 * var_13)
            let (var_35: int64) = (var_12 + var_34)
            var_28.[int32 var_35] <- true
            let (var_36: Rec4) = (Rec4Case1(Tuple6(var_4, var_10)))
            method_22((var_5: EnvHeapMutable3), (var_13: int64), (var_12: int64), (var_36: Rec4))
            method_32((var_0: EnvHeap1), (var_1: int64), (var_2: int64), (var_3: int64), (var_6: string), (var_5: EnvHeapMutable3), (var_7: string), (var_8: string), (var_4: string), (var_9: Tuple5), (var_10: Rec4))
    else
        method_32((var_0: EnvHeap1), (var_1: int64), (var_2: int64), (var_3: int64), (var_6: string), (var_5: EnvHeapMutable3), (var_7: string), (var_8: string), (var_4: string), (var_9: Tuple5), (var_10: Rec4))
and method_18((var_0: int64), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64)): unit =
    let (var_5: int64) = (var_2 - 1L)
    let (var_6: int64) = (var_5 + 1L)
    let (var_7: int64) =
        if (0L > var_6) then
            0L
        else
            var_6
    let (var_8: int64) =
        if (0L > var_6) then
            0L
        else
            var_6
    let (var_9: int64) = (var_8 * var_7)
    let (var_10: (bool [])) = Array.zeroCreate<bool> (System.Convert.ToInt32(var_9))
    let (var_11: int64) = 0L
    let (var_12: int64) = 0L
    let (var_13: int64) = method_19((var_7: int64), (var_10: (bool [])), (var_5: int64), (var_12: int64), (var_11: int64))
    let (var_14: EnvHeap1) = ({mem_0 = (var_10: (bool [])); mem_1 = (var_5: int64)} : EnvHeap1)
    let (var_15: (bool [])) = var_14.mem_0
    let (var_16: int64) = var_14.mem_1
    let (var_17: bool) =
        if (var_1 >= 0L) then
            (var_1 <= var_16)
        else
            false
    if var_17 then
        ()
    else
        (failwith "Argument out of bounds.")
    let (var_18: int64) = (var_16 + 1L)
    let (var_19: int64) =
        if (0L > var_18) then
            0L
        else
            var_18
    let (var_20: bool) =
        if (var_0 >= 0L) then
            (var_0 <= var_16)
        else
            false
    if var_20 then
        ()
    else
        (failwith "Argument out of bounds.")
    let (var_21: int64) = (var_19 * var_0)
    let (var_22: int64) = (var_1 + var_21)
    var_15.[int32 var_22] <- true
    let (var_23: string) = "UP"
    let (var_24: string) = "DOWN"
    let (var_25: string) = "LEFT"
    let (var_26: string) = "RIGHT"
    let (var_27: int64) = 0L
    let (var_28: int64) = 0L
    let (var_29: (Tuple2 [])) = Array.zeroCreate<Tuple2> (System.Convert.ToInt32(16L))
    let (var_30: EnvHeapMutable3) = ({mem_0 = (var_29: (Tuple2 [])); mem_1 = (var_27: int64); mem_2 = (var_28: int64)} : EnvHeapMutable3)
    let (var_31: Rec4) = Rec4Case0
    method_22((var_30: EnvHeapMutable3), (var_0: int64), (var_1: int64), (var_31: Rec4))
    method_26((var_24: string), (var_14: EnvHeap1), (var_2: int64), (var_3: int64), (var_4: int64), (var_30: EnvHeapMutable3), (var_25: string), (var_26: string), (var_23: string))
and method_24((var_0: (Tuple2 [])), (var_1: (Tuple2 [])), (var_2: int64), (var_3: int64), (var_4: int64)): unit =
    if (var_4 < var_3) then
        let (var_5: Tuple2) = var_0.[int32 var_4]
        var_1.[int32 (var_4 - var_2)] <- var_5
        let (var_6: int64) = (var_4 + 1L)
        method_24((var_0: (Tuple2 [])), (var_1: (Tuple2 [])), (var_2: int64), (var_3: int64), (var_6: int64))
    else
        ()
and method_29((var_0: string), (var_1: Rec4)): unit =
    let (var_2: Union7) = method_30((var_0: string), (var_1: Rec4))
    match var_2 with
    | Union7Case0(var_3) ->
        let (var_4: string) = var_3.mem_0
        System.Console.WriteLine(var_4)
    | Union7Case1 ->
        (failwith "Error: No moves taken.")
and method_32((var_0: EnvHeap1), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: string), (var_5: EnvHeapMutable3), (var_6: string), (var_7: string), (var_8: string), (var_9: Tuple5), (var_10: Rec4)): unit =
    let (var_11: int64) = var_9.mem_0
    let (var_12: int64) = var_9.mem_1
    let (var_13: int64) = (var_11 + 1L)
    let (var_14: bool) =
        if (var_13 >= 0L) then
            (var_13 < var_1)
        else
            false
    let (var_16: bool) =
        if var_14 then
            if (var_12 >= 0L) then
                (var_12 < var_1)
            else
                false
        else
            false
    let (var_26: bool) =
        if var_16 then
            let (var_17: (bool [])) = var_0.mem_0
            let (var_18: int64) = var_0.mem_1
            let (var_19: bool) =
                if (var_12 >= 0L) then
                    (var_12 <= var_18)
                else
                    false
            if var_19 then
                ()
            else
                (failwith "Argument out of bounds.")
            let (var_20: int64) = (var_18 + 1L)
            let (var_21: int64) =
                if (0L > var_20) then
                    0L
                else
                    var_20
            let (var_22: bool) =
                if (var_13 >= 0L) then
                    (var_13 <= var_18)
                else
                    false
            if var_22 then
                ()
            else
                (failwith "Argument out of bounds.")
            let (var_23: int64) = (var_21 * var_13)
            let (var_24: int64) = (var_12 + var_23)
            let (var_25: bool) = var_17.[int32 var_24]
            (var_25 = false)
        else
            false
    if var_26 then
        let (var_27: bool) =
            if (var_13 = var_3) then
                (var_12 = var_2)
            else
                false
        if var_27 then
            method_29((var_4: string), (var_10: Rec4))
        else
            let (var_28: (bool [])) = var_0.mem_0
            let (var_29: int64) = var_0.mem_1
            let (var_30: bool) =
                if (var_12 >= 0L) then
                    (var_12 <= var_29)
                else
                    false
            if var_30 then
                ()
            else
                (failwith "Argument out of bounds.")
            let (var_31: int64) = (var_29 + 1L)
            let (var_32: int64) =
                if (0L > var_31) then
                    0L
                else
                    var_31
            let (var_33: bool) =
                if (var_13 >= 0L) then
                    (var_13 <= var_29)
                else
                    false
            if var_33 then
                ()
            else
                (failwith "Argument out of bounds.")
            let (var_34: int64) = (var_32 * var_13)
            let (var_35: int64) = (var_12 + var_34)
            var_28.[int32 var_35] <- true
            let (var_36: Rec4) = (Rec4Case1(Tuple6(var_4, var_10)))
            method_22((var_5: EnvHeapMutable3), (var_13: int64), (var_12: int64), (var_36: Rec4))
            method_33((var_0: EnvHeap1), (var_1: int64), (var_2: int64), (var_3: int64), (var_6: string), (var_5: EnvHeapMutable3), (var_7: string), (var_4: string), (var_8: string), (var_9: Tuple5), (var_10: Rec4))
    else
        method_33((var_0: EnvHeap1), (var_1: int64), (var_2: int64), (var_3: int64), (var_6: string), (var_5: EnvHeapMutable3), (var_7: string), (var_4: string), (var_8: string), (var_9: Tuple5), (var_10: Rec4))
and method_30((var_0: string), (var_1: Rec4)): Union7 =
    method_31((var_1: Rec4), (var_0: string))
and method_33((var_0: EnvHeap1), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: string), (var_5: EnvHeapMutable3), (var_6: string), (var_7: string), (var_8: string), (var_9: Tuple5), (var_10: Rec4)): unit =
    let (var_11: int64) = var_9.mem_0
    let (var_12: int64) = var_9.mem_1
    let (var_13: int64) = (var_12 - 1L)
    let (var_14: bool) =
        if (var_11 >= 0L) then
            (var_11 < var_1)
        else
            false
    let (var_16: bool) =
        if var_14 then
            if (var_13 >= 0L) then
                (var_13 < var_1)
            else
                false
        else
            false
    let (var_26: bool) =
        if var_16 then
            let (var_17: (bool [])) = var_0.mem_0
            let (var_18: int64) = var_0.mem_1
            let (var_19: bool) =
                if (var_13 >= 0L) then
                    (var_13 <= var_18)
                else
                    false
            if var_19 then
                ()
            else
                (failwith "Argument out of bounds.")
            let (var_20: int64) = (var_18 + 1L)
            let (var_21: int64) =
                if (0L > var_20) then
                    0L
                else
                    var_20
            let (var_22: bool) =
                if (var_11 >= 0L) then
                    (var_11 <= var_18)
                else
                    false
            if var_22 then
                ()
            else
                (failwith "Argument out of bounds.")
            let (var_23: int64) = (var_21 * var_11)
            let (var_24: int64) = (var_13 + var_23)
            let (var_25: bool) = var_17.[int32 var_24]
            (var_25 = false)
        else
            false
    if var_26 then
        let (var_27: bool) =
            if (var_11 = var_3) then
                (var_13 = var_2)
            else
                false
        if var_27 then
            method_29((var_4: string), (var_10: Rec4))
        else
            let (var_28: (bool [])) = var_0.mem_0
            let (var_29: int64) = var_0.mem_1
            let (var_30: bool) =
                if (var_13 >= 0L) then
                    (var_13 <= var_29)
                else
                    false
            if var_30 then
                ()
            else
                (failwith "Argument out of bounds.")
            let (var_31: int64) = (var_29 + 1L)
            let (var_32: int64) =
                if (0L > var_31) then
                    0L
                else
                    var_31
            let (var_33: bool) =
                if (var_11 >= 0L) then
                    (var_11 <= var_29)
                else
                    false
            if var_33 then
                ()
            else
                (failwith "Argument out of bounds.")
            let (var_34: int64) = (var_32 * var_11)
            let (var_35: int64) = (var_13 + var_34)
            var_28.[int32 var_35] <- true
            let (var_36: Rec4) = (Rec4Case1(Tuple6(var_4, var_10)))
            method_22((var_5: EnvHeapMutable3), (var_11: int64), (var_13: int64), (var_36: Rec4))
            method_34((var_0: EnvHeap1), (var_1: int64), (var_2: int64), (var_3: int64), (var_6: string), (var_7: string), (var_5: EnvHeapMutable3), (var_4: string), (var_8: string), (var_9: Tuple5), (var_10: Rec4))
    else
        method_34((var_0: EnvHeap1), (var_1: int64), (var_2: int64), (var_3: int64), (var_6: string), (var_7: string), (var_5: EnvHeapMutable3), (var_4: string), (var_8: string), (var_9: Tuple5), (var_10: Rec4))
and method_31((var_0: Rec4), (var_1: string)): Union7 =
    match var_0 with
    | Rec4Case0 ->
        (Union7Case0(Tuple8(var_1)))
    | Rec4Case1(var_2) ->
        let (var_3: string) = var_2.mem_0
        let (var_4: Rec4) = var_2.mem_1
        method_31((var_4: Rec4), (var_3: string))
and method_34((var_0: EnvHeap1), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: string), (var_5: string), (var_6: EnvHeapMutable3), (var_7: string), (var_8: string), (var_9: Tuple5), (var_10: Rec4)): unit =
    let (var_11: int64) = var_9.mem_0
    let (var_12: int64) = var_9.mem_1
    let (var_13: int64) = (var_12 + 1L)
    let (var_14: bool) =
        if (var_11 >= 0L) then
            (var_11 < var_1)
        else
            false
    let (var_16: bool) =
        if var_14 then
            if (var_13 >= 0L) then
                (var_13 < var_1)
            else
                false
        else
            false
    let (var_26: bool) =
        if var_16 then
            let (var_17: (bool [])) = var_0.mem_0
            let (var_18: int64) = var_0.mem_1
            let (var_19: bool) =
                if (var_13 >= 0L) then
                    (var_13 <= var_18)
                else
                    false
            if var_19 then
                ()
            else
                (failwith "Argument out of bounds.")
            let (var_20: int64) = (var_18 + 1L)
            let (var_21: int64) =
                if (0L > var_20) then
                    0L
                else
                    var_20
            let (var_22: bool) =
                if (var_11 >= 0L) then
                    (var_11 <= var_18)
                else
                    false
            if var_22 then
                ()
            else
                (failwith "Argument out of bounds.")
            let (var_23: int64) = (var_21 * var_11)
            let (var_24: int64) = (var_13 + var_23)
            let (var_25: bool) = var_17.[int32 var_24]
            (var_25 = false)
        else
            false
    if var_26 then
        let (var_27: bool) =
            if (var_11 = var_3) then
                (var_13 = var_2)
            else
                false
        if var_27 then
            method_29((var_4: string), (var_10: Rec4))
        else
            let (var_28: (bool [])) = var_0.mem_0
            let (var_29: int64) = var_0.mem_1
            let (var_30: bool) =
                if (var_13 >= 0L) then
                    (var_13 <= var_29)
                else
                    false
            if var_30 then
                ()
            else
                (failwith "Argument out of bounds.")
            let (var_31: int64) = (var_29 + 1L)
            let (var_32: int64) =
                if (0L > var_31) then
                    0L
                else
                    var_31
            let (var_33: bool) =
                if (var_11 >= 0L) then
                    (var_11 <= var_29)
                else
                    false
            if var_33 then
                ()
            else
                (failwith "Argument out of bounds.")
            let (var_34: int64) = (var_32 * var_11)
            let (var_35: int64) = (var_13 + var_34)
            var_28.[int32 var_35] <- true
            let (var_36: Rec4) = (Rec4Case1(Tuple6(var_4, var_10)))
            method_22((var_6: EnvHeapMutable3), (var_11: int64), (var_13: int64), (var_36: Rec4))
            method_26((var_5: string), (var_0: EnvHeap1), (var_1: int64), (var_2: int64), (var_3: int64), (var_6: EnvHeapMutable3), (var_7: string), (var_4: string), (var_8: string))
    else
        method_26((var_5: string), (var_0: EnvHeap1), (var_1: int64), (var_2: int64), (var_3: int64), (var_6: EnvHeapMutable3), (var_7: string), (var_4: string), (var_8: string))
let (var_0: System.IO.Stream) = System.Console.OpenStandardInput()
let (var_1: System.IO.StreamReader) = System.IO.StreamReader(var_0)
let (var_2: string) = var_1.ReadToEnd()
let (var_3: int64) = 0L
let (var_5: bool) =
    if (var_3 >= 0L) then
        let (var_4: int64) = (int64 var_2.Length)
        (var_3 < var_4)
    else
        false
if var_5 then
    let (var_6: char) = var_2.[int32 var_3]
    let (var_7: bool) = ('-' = var_6)
    let (var_8: int64) = (var_3 + 1L)
    if var_7 then
        let (var_9: bool) = false
        method_1((var_9: bool), (var_2: string), (var_8: int64))
    else
        let (var_10: bool) = true
        method_1((var_10: bool), (var_2: string), (var_3: int64))
else
    let (var_11: bool) = true
    method_1((var_11: bool), (var_2: string), (var_3: int64))

