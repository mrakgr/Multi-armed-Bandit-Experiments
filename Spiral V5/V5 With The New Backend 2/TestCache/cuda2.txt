let cuda_kernels = """
extern "C" {
}
"""

let rec method_0 ((var_0: System.Object)): (System.Diagnostics.DataReceivedEventArgs -> unit) =
    method_1((var_0: System.Object))
and method_1 ((var_1: System.Object)) ((var_0: System.Diagnostics.DataReceivedEventArgs)): unit =
    let (var_2: string) = var_0.get_Data()
    System.Console.WriteLine(var_2)
let (var_0: string) = cuda_kernels
let (var_1: string) = System.Environment.GetEnvironmentVariable("CUDA_PATH_V8_0")
let (var_2: bool) = Microsoft.FSharp.Core.Operators.isNull(var_1)
if var_2 then
    (failwith "CUDA_PATH_V8_0 environment variable not found. Make sure Cuda 8.0 SDK is installed.")
else
    ()
let (var_3: string) = System.Environment.GetEnvironmentVariable("VS140COMNTOOLS")
let (var_4: bool) = Microsoft.FSharp.Core.Operators.isNull(var_3)
if var_4 then
    (failwith "VS140COMNTOOLS environment variable not found. Make sure VS2015 is installed.")
else
    ()
let (var_5: System.IO.DirectoryInfo) = System.IO.Directory.GetParent(var_3)
let (var_6: System.IO.DirectoryInfo) = var_5.get_Parent()
let (var_7: System.IO.DirectoryInfo) = var_6.get_Parent()
let (var_8: string) = var_7.get_FullName()
let (var_9: string) = System.Environment.GetEnvironmentVariable("CUB_PATH")
let (var_10: bool) = Microsoft.FSharp.Core.Operators.isNull(var_9)
if var_10 then
    (failwith "If you are getting this exception then that means that CUB_PATH environment variable is not defined.

Go to: https://nvlabs.github.io/cub/index.html#sec6
...and download the latest version of the library, extract it somewhere like, 
eg. : C:\\cub-1.6.3
and add that directory to the global enviroment by creating the CUB_PATH variable with a pointer to it.")
else
    ()
let (var_11: ManagedCuda.CudaContext) = ManagedCuda.CudaContext(false)
let (var_12: string) = System.IO.Path.Combine("C:\\Temp\\", "nvcc_router.bat")
let (var_13: System.Diagnostics.ProcessStartInfo) = System.Diagnostics.ProcessStartInfo()
var_13.set_RedirectStandardOutput(true)
var_13.set_RedirectStandardError(true)
var_13.set_UseShellExecute(false)
var_13.set_FileName(var_12)
let (var_14: System.Diagnostics.Process) = System.Diagnostics.Process()
var_14.set_StartInfo(var_13)
let (var_16: (System.Object -> (System.Diagnostics.DataReceivedEventArgs -> unit))) = method_0
let (var_17: System.Diagnostics.DataReceivedEventHandler) = System.Diagnostics.DataReceivedEventHandler(var_16)
let (var_18: string) = System.IO.Path.Combine(var_8, "VC\\bin\\x86_amd64\\vcvarsx86_amd64.bat")
let (var_19: int64) = (int64 var_18.Length)
let (var_20: int64) = (7L + var_19)
let (var_21: int32) = (int32 var_20)
let (var_22: System.Text.StringBuilder) = System.Text.StringBuilder(var_21)
let (var_23: System.Text.StringBuilder) = var_22.Append('"')
let (var_24: System.Text.StringBuilder) = var_23.Append(var_18)
let (var_25: System.Text.StringBuilder) = var_24.Append("'")
let (var_26: string) = var_25.ToString()
let (var_27: string) = System.IO.Path.Combine(var_8, "VC\\bin\\x86_amd64")
let (var_28: int64) = (int64 var_27.Length)
let (var_29: int64) = (7L + var_28)
let (var_30: int32) = (int32 var_29)
let (var_31: System.Text.StringBuilder) = System.Text.StringBuilder(var_30)
let (var_32: System.Text.StringBuilder) = var_31.Append('"')
let (var_33: System.Text.StringBuilder) = var_32.Append(var_27)
let (var_34: System.Text.StringBuilder) = var_33.Append("'")
let (var_35: string) = var_34.ToString()
let (var_36: string) = System.IO.Path.Combine(var_1, "include")
let (var_37: int64) = (int64 var_36.Length)
let (var_38: int64) = (7L + var_37)
let (var_39: int32) = (int32 var_38)
let (var_40: System.Text.StringBuilder) = System.Text.StringBuilder(var_39)
let (var_41: System.Text.StringBuilder) = var_40.Append('"')
let (var_42: System.Text.StringBuilder) = var_41.Append(var_36)
let (var_43: System.Text.StringBuilder) = var_42.Append("'")
let (var_44: string) = var_43.ToString()
let (var_45: int64) = (int64 var_9.Length)
let (var_46: int64) = (7L + var_45)
let (var_47: int32) = (int32 var_46)
let (var_48: System.Text.StringBuilder) = System.Text.StringBuilder(var_47)
let (var_49: System.Text.StringBuilder) = var_48.Append('"')
let (var_50: System.Text.StringBuilder) = var_49.Append(var_9)
let (var_51: System.Text.StringBuilder) = var_50.Append("'")
let (var_52: string) = var_51.ToString()
let (var_53: System.Text.StringBuilder) = System.Text.StringBuilder(15)
let (var_54: System.Text.StringBuilder) = var_53.Append('"')
let (var_55: System.Text.StringBuilder) = var_54.Append("C:\\Temp\\")
let (var_56: System.Text.StringBuilder) = var_55.Append("'")
let (var_57: string) = var_56.ToString()
let (var_58: string) = System.IO.Path.Combine("C:\\Temp\\", "cuda_kernels.ptx")
let (var_59: int64) = (int64 var_58.Length)
let (var_60: int64) = (7L + var_59)
let (var_61: int32) = (int32 var_60)
let (var_62: System.Text.StringBuilder) = System.Text.StringBuilder(var_61)
let (var_63: System.Text.StringBuilder) = var_62.Append('"')
let (var_64: System.Text.StringBuilder) = var_63.Append(var_58)
let (var_65: System.Text.StringBuilder) = var_64.Append("'")
let (var_66: string) = var_65.ToString()
let (var_67: string) = System.IO.Path.Combine("C:\\Temp\\", "cuda_kernels.cu")
let (var_68: int64) = (int64 var_67.Length)
let (var_69: int64) = (7L + var_68)
let (var_70: int32) = (int32 var_69)
let (var_71: System.Text.StringBuilder) = System.Text.StringBuilder(var_70)
let (var_72: System.Text.StringBuilder) = var_71.Append('"')
let (var_73: System.Text.StringBuilder) = var_72.Append(var_67)
let (var_74: System.Text.StringBuilder) = var_73.Append("'")
let (var_75: string) = var_74.ToString()
let (var_76: bool) = System.IO.File.Exists(var_67)
if var_76 then
    System.IO.File.Delete(var_67)
else
    ()
System.IO.File.WriteAllText(var_67, "test")
let (var_77: bool) = System.IO.File.Exists(var_12)
if var_77 then
    System.IO.File.Delete(var_12)
else
    ()
let (var_78: System.IO.FileStream) = System.IO.File.OpenWrite(var_12)
let (var_79: System.IO.StreamWriter) = System.IO.StreamWriter(var_78)
let (var_80: int64) = (int64 var_26.Length)
let (var_81: int64) = (5L + var_80)
let (var_82: int32) = (int32 var_81)
let (var_83: System.Text.StringBuilder) = System.Text.StringBuilder(var_82)
let (var_84: System.Text.StringBuilder) = var_83.Append("call ")
let (var_85: System.Text.StringBuilder) = var_84.Append(var_26)
let (var_86: string) = var_85.ToString()
var_79.WriteLine(var_86)
let (var_87: int64) = (int64 var_35.Length)
let (var_88: int64) = (int64 var_44.Length)
let (var_89: int64) = (var_87 + var_88)
let (var_90: int64) = (int64 var_52.Length)
let (var_91: int64) = (var_89 + var_90)
let (var_92: int64) = (int64 var_57.Length)
let (var_93: int64) = (var_91 + var_92)
let (var_94: int64) = (int64 var_66.Length)
let (var_95: int64) = (var_93 + var_94)
let (var_96: int64) = (int64 var_75.Length)
let (var_97: int64) = (var_95 + var_96)
let (var_98: int64) = (175L + var_97)
let (var_99: int32) = (int32 var_98)
let (var_100: System.Text.StringBuilder) = System.Text.StringBuilder(var_99)
let (var_101: System.Text.StringBuilder) = var_100.Append("nvcc -gencode=arch=compute_30,code=\"sm_30,compute_30\" --use-local-env --cl-version 2015 -ccbin ")
let (var_102: System.Text.StringBuilder) = var_101.Append(var_35)
let (var_103: System.Text.StringBuilder) = var_102.Append("  -I")
let (var_104: System.Text.StringBuilder) = var_103.Append(var_44)
let (var_105: System.Text.StringBuilder) = var_104.Append(" -I")
let (var_106: System.Text.StringBuilder) = var_105.Append(var_52)
let (var_107: System.Text.StringBuilder) = var_106.Append(" --keep-dir ")
let (var_108: System.Text.StringBuilder) = var_107.Append(var_57)
let (var_109: System.Text.StringBuilder) = var_108.Append(" -maxrregcount=0  --machine 64 -ptx -cudart static  -o ")
let (var_110: System.Text.StringBuilder) = var_109.Append(var_66)
let (var_111: System.Text.StringBuilder) = var_110.Append(' ')
let (var_112: System.Text.StringBuilder) = var_111.Append(var_75)
let (var_113: string) = var_112.ToString()
var_79.WriteLine(var_113)
var_78.Dispose()
var_79.Dispose()
let (var_114: bool) = var_14.Start()
if (var_114 = false) then
    (failwith "NVCC failed to run.")
else
    ()
var_14.BeginOutputReadLine()
var_14.BeginErrorReadLine()
var_14.WaitForExit()
let (var_115: int32) = var_14.get_ExitCode()
if (var_115 <> 0) then
    let (var_116: System.Text.StringBuilder) = System.Text.StringBuilder(40)
    let (var_117: System.Text.StringBuilder) = var_116.Append("NVCC failed compilation with code ")
    let (var_118: System.Text.StringBuilder) = var_117.Append(var_115)
    let (var_119: string) = var_118.ToString()
    (failwith var_119)
else
    ()
var_14.Dispose()
var_11.LoadModulePTX(var_58)
