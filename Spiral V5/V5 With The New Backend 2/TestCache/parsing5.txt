module SpiralExample.Main
let cuda_kernels = """
extern "C" {
    
}
"""

let rec method_0((var_0: (int64 [])), (var_1: string), (var_2: int64), (var_3: int64)): unit =
    let (var_4: bool) = (var_2 < 16L)
    if var_4 then
        let (var_5: int64) = (var_2 + 1L)
        let (var_7: bool) =
            if (var_3 >= 0L) then
                let (var_6: int64) = (int64 var_1.Length)
                (var_3 < var_6)
            else
                false
        if var_7 then
            let (var_8: char) = var_1.[int32 var_3]
            let (var_9: bool) = ('-' = var_8)
            let (var_10: int64) = (var_3 + 1L)
            if var_9 then
                let (var_11: bool) = false
                method_1((var_11: bool), (var_0: (int64 [])), (var_2: int64), (var_5: int64), (var_1: string), (var_10: int64))
            else
                let (var_12: bool) = true
                method_1((var_12: bool), (var_0: (int64 [])), (var_2: int64), (var_5: int64), (var_1: string), (var_3: int64))
        else
            let (var_13: bool) = true
            method_1((var_13: bool), (var_0: (int64 [])), (var_2: int64), (var_5: int64), (var_1: string), (var_3: int64))
    else
        ()
and method_1((var_0: bool), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: string), (var_5: int64)): unit =
    let (var_7: bool) =
        if (var_5 >= 0L) then
            let (var_6: int64) = (int64 var_4.Length)
            (var_5 < var_6)
        else
            false
    if var_7 then
        let (var_8: char) = var_4.[int32 var_5]
        let (var_9: bool) =
            if (var_8 >= '0') then
                (var_8 <= '9')
            else
                false
        let (var_10: int64) = (var_5 + 1L)
        if var_9 then
            let (var_11: int64) = System.Convert.ToInt64(var_8)
            let (var_12: int64) = System.Convert.ToInt64('0')
            let (var_13: int64) = (var_11 - var_12)
            method_2((var_0: bool), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: string), (var_13: int64), (var_10: int64))
        else
            (failwith "pint64")
    else
        (failwith "pint64")
and method_2((var_0: bool), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: string), (var_5: int64), (var_6: int64)): unit =
    let (var_8: bool) =
        if (var_6 >= 0L) then
            let (var_7: int64) = (int64 var_4.Length)
            (var_6 < var_7)
        else
            false
    if var_8 then
        let (var_9: char) = var_4.[int32 var_6]
        let (var_10: bool) =
            if (var_9 >= '0') then
                (var_9 <= '9')
            else
                false
        let (var_11: int64) = (var_6 + 1L)
        if var_10 then
            let (var_12: int64) = System.Convert.ToInt64(var_9)
            let (var_13: int64) = System.Convert.ToInt64('0')
            let (var_14: int64) = (var_12 - var_13)
            let (var_15: bool) =
                if (var_5 = 922337203685477580L) then
                    (var_14 <= 7L)
                else
                    false
            let (var_16: bool) =
                if var_15 then
                    true
                else
                    (var_5 < 922337203685477580L)
            if var_16 then
                let (var_17: int64) = (var_5 * 10L)
                let (var_18: int64) = (var_17 + var_14)
                method_2((var_0: bool), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: string), (var_18: int64), (var_11: int64))
            else
                (failwith "integer overflow")
        else
            let (var_19: int64) =
                if var_0 then
                    var_5
                else
                    (-var_5)
            let (var_20: int64) = 0L
            method_3((var_19: int64), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: string), (var_20: int64), (var_6: int64))
    else
        let (var_21: int64) =
            if var_0 then
                var_5
            else
                (-var_5)
        let (var_22: int64) = 0L
        method_3((var_21: int64), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: string), (var_22: int64), (var_6: int64))
and method_3((var_0: int64), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: string), (var_5: int64), (var_6: int64)): unit =
    let (var_7: int64) = (var_5 + 1L)
    let (var_9: bool) =
        if (var_6 >= 0L) then
            let (var_8: int64) = (int64 var_4.Length)
            (var_6 < var_8)
        else
            false
    if var_9 then
        let (var_10: char) = var_4.[int32 var_6]
        let (var_12: bool) =
            if (var_10 = ' ') then
                true
            else
                if (var_10 = '\n') then
                    true
                else
                    (var_10 = '\r')
        let (var_13: int64) = (var_6 + 1L)
        if var_12 then
            method_3((var_0: int64), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: string), (var_7: int64), (var_13: int64))
        else
            var_1.[int32 var_2] <- var_0
            method_0((var_1: (int64 [])), (var_4: string), (var_3: int64), (var_6: int64))
    else
        var_1.[int32 var_2] <- var_0
        method_0((var_1: (int64 [])), (var_4: string), (var_3: int64), (var_6: int64))
let (var_0: System.IO.Stream) = System.Console.OpenStandardInput()
let (var_1: System.IO.StreamReader) = System.IO.StreamReader(var_0)
let (var_2: string) = var_1.ReadToEnd()
let (var_3: int64) = 0L
let (var_4: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(16L))
let (var_5: int64) = 0L
method_0((var_4: (int64 [])), (var_2: string), (var_5: int64), (var_3: int64))

