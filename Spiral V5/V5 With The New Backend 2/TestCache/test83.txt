module SpiralExample
let cuda_kernels = """
extern "C" {
}
"""

type EnvHeap0 =
    {
    mem_0: (bool [])
    mem_1: int64
    mem_2: int64
    }
and Env1 =
    struct
    val mem_0: EnvHeap0
    val mem_1: Env2
    val mem_2: Env3
    new(arg_mem_0, arg_mem_1, arg_mem_2) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1; mem_2 = arg_mem_2}
    end
and Env2 =
    struct
    val mem_0: EnvHeap0
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Env3 =
    struct
    val mem_0: EnvHeap0
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
let rec method_0((var_0: int64), (var_1: int64), (var_2: (bool [])), (var_3: int64), (var_4: int64), (var_5: int64)): int64 =
    if (var_4 <= var_3) then
        let (var_6: int64) = 0L
        let (var_7: int64) = method_1((var_4: int64), (var_2: (bool [])), (var_1: int64), (var_6: int64), (var_5: int64))
        let (var_8: int64) = (var_5 + var_0)
        let (var_9: int64) = (var_4 + 1L)
        method_0((var_0: int64), (var_1: int64), (var_2: (bool [])), (var_3: int64), (var_9: int64), (var_8: int64))
    else
        var_5
and method_2((var_0: EnvHeap0)): Env1 =
    (Env1(var_0, (Env2(var_0)), (Env3(var_0))))
and method_1((var_0: int64), (var_1: (bool [])), (var_2: int64), (var_3: int64), (var_4: int64)): int64 =
    if (var_3 <= var_2) then
        var_1.[int32 var_4] <- false
        let (var_5: int64) = (var_4 + 1L)
        let (var_6: int64) = (var_3 + 1L)
        method_1((var_0: int64), (var_1: (bool [])), (var_2: int64), (var_6: int64), (var_5: int64))
    else
        var_4
let (var_0: string) = cuda_kernels
let (var_1: int64) = 10L
let (var_2: int64) = 10L
let (var_3: int64) = (var_1 - 1L)
let (var_4: int64) = (var_2 - 1L)
let (var_5: int64) = (var_4 + 1L)
let (var_6: int64) =
    if (0L < var_5) then
        var_5
    else
        0L
let (var_7: int64) = (var_3 + 1L)
let (var_8: int64) =
    if (0L < var_7) then
        var_7
    else
        0L
let (var_9: int64) = (var_8 * var_6)
let (var_10: (bool [])) = Array.zeroCreate<bool> (System.Convert.ToInt32(var_9))
let (var_11: int64) = 0L
let (var_12: int64) = 0L
let (var_13: int64) = method_0((var_6: int64), (var_4: int64), (var_10: (bool [])), (var_3: int64), (var_12: int64), (var_11: int64))
let (var_14: EnvHeap0) = ({mem_0 = (var_10: (bool [])); mem_1 = (var_3: int64); mem_2 = (var_4: int64)} : EnvHeap0)
method_2((var_14: EnvHeap0))
