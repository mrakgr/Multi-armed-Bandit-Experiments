module SpiralExample.Main
let cuda_kernels = """
extern "C" {
    
}
"""

type Union0 =
    | Union0Case0 of int64
    | Union0Case1 of Tuple3
    | Union0Case2 of Rec1
and Rec1 =
    | Rec1Case0 of Tuple4
    | Rec1Case1
and Tuple2 =
    struct
    val mem_0: int64
    val mem_1: Rec1
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Tuple3 =
    struct
    val mem_0: int64
    val mem_1: int64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Tuple4 =
    struct
    val mem_0: Tuple2
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
let (var_0: Union0) = (Union0Case0(1L))
match var_0 with
| Union0Case0(var_1) ->
    1L
| Union0Case1(var_2) ->
    let (var_4: int64) = var_2.mem_0
    let (var_5: int64) = var_2.mem_1
    2L
| Union0Case2(var_3) ->
    match var_3 with
    | Rec1Case0(var_6) ->
        let (var_7: Tuple2) = var_6.mem_0
        let (var_8: int64) = var_7.mem_0
        let (var_9: Rec1) = var_7.mem_1
        2L
    | Rec1Case1 ->
        3L

