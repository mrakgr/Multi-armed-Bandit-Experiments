module SpiralExample
let cuda_kernels = """
extern "C" {
}
"""

type Rec0 =
    | Rec0Case0
    | Rec0Case1 of Tuple1
and Tuple1 =
    struct
    val mem_0: int64
    val mem_1: Rec0
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
let (var_0: string) = cuda_kernels
let (var_1: Rec0) = Rec0Case0
match var_1 with
| Rec0Case0 ->
    0L
| Rec0Case1(var_2) ->
    let (var_3: int64) = var_2.mem_0
    let (var_4: Rec0) = var_2.mem_1
    match var_4 with
    | Rec0Case0 ->
        55L
    | Rec0Case1(var_5) ->
        let (var_6: int64) = var_5.mem_0
        let (var_7: Rec0) = var_5.mem_1
        match var_7 with
        | Rec0Case0 ->
            let (var_9: int64) = (var_3 + var_6)
            (var_9 + 10L)
        | Rec0Case1(var_8) ->
            let (var_10: int64) = var_8.mem_0
            let (var_11: Rec0) = var_8.mem_1
            (var_3 + var_6)

