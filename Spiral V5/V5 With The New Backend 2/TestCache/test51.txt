module SpiralExample.Main
let cuda_kernels = """
extern "C" {
    
}
"""

let rec method_0((var_0: (int64 [])), (var_1: int64)): unit =
    if (var_1 < 16L) then
        var_0.[int32 var_1] <- var_1
        let (var_2: int64) = (var_1 + 1L)
        method_0((var_0: (int64 [])), (var_2: int64))
    else
        ()
and method_1((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64), (var_3: int64)): unit =
    if (var_3 < var_2) then
        let (var_4: int64) = var_1.[int32 var_3]
        var_0.[int32 var_3] <- (2L * var_4)
        let (var_5: int64) = (var_3 + 1L)
        method_1((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64), (var_5: int64))
    else
        ()
and method_2((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: int64)): int64 =
    if (var_3 < var_2) then
        let (var_5: int64) = var_0.[int32 var_3]
        let (var_6: int64) =
            if (15L < var_5) then
                var_1.[int32 var_4] <- var_5
                (var_4 + 1L)
            else
                var_4
        let (var_7: int64) = (var_3 + 1L)
        method_2((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64), (var_7: int64), (var_6: int64))
    else
        var_4
and method_3((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64), (var_3: int64)): unit =
    if (var_3 < var_2) then
        let (var_4: int64) = var_1.[int32 var_3]
        var_0.[int32 var_3] <- var_4
        let (var_5: int64) = (var_3 + 1L)
        method_3((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64), (var_5: int64))
    else
        ()
let (var_0: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(16L))
let (var_1: int64) = 0L
method_0((var_0: (int64 [])), (var_1: int64))
let (var_2: int64) = var_0.LongLength
let (var_3: bool) = (var_2 >= 0L)
if var_3 then
    ()
else
    (failwith "The input to init needs to be greater or equal than 0.")
let (var_5: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_2))
let (var_6: int64) = 0L
method_1((var_5: (int64 [])), (var_0: (int64 [])), (var_2: int64), (var_6: int64))
let (var_7: int64) = var_5.LongLength
let (var_8: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_7))
let (var_9: int64) = 0L
let (var_10: int64) = var_5.LongLength
let (var_11: int64) = 0L
let (var_12: int64) = method_2((var_5: (int64 [])), (var_8: (int64 [])), (var_10: int64), (var_11: int64), (var_9: int64))
let (var_13: bool) = (var_12 >= 0L)
if var_13 then
    ()
else
    (failwith "The input to init needs to be greater or equal than 0.")
let (var_15: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_12))
let (var_16: int64) = 0L
method_3((var_15: (int64 [])), (var_8: (int64 [])), (var_12: int64), (var_16: int64))
var_15
