module SpiralExample
let cuda_kernels = """
extern "C" {
}
"""

type Rec0 =
    | Rec0Case0
    | Rec0Case1 of Tuple2
and Tuple1 =
    struct
    val mem_0: float
    val mem_1: float
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Tuple2 =
    struct
    val mem_0: float
    val mem_1: Rec0
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
let rec method_4((var_0: Rec0), (var_1: float)): float =
    match var_0 with
    | Rec0Case0 ->
        var_1
    | Rec0Case1(var_2) ->
        let (var_3: float) = var_2.mem_0
        let (var_4: Rec0) = var_2.mem_1
        let (var_5: float) = (var_1 + var_3)
        method_4((var_4: Rec0), (var_5: float))
and method_5((var_0: Rec0), (var_1: float)): float =
    match var_0 with
    | Rec0Case0 ->
        var_1
    | Rec0Case1(var_2) ->
        let (var_3: float) = var_2.mem_0
        let (var_4: Rec0) = var_2.mem_1
        let (var_5: float) = method_5((var_4: Rec0), (var_1: float))
        (var_3 + var_5)
let (var_0: string) = cuda_kernels
let (var_1: float) = 0.000000
let (var_2: Rec0) = Rec0Case0
let (var_3: float) = method_4((var_2: Rec0), (var_1: float))
let (var_4: Rec0) = Rec0Case0
let (var_5: float) = 0.000000
let (var_6: float) = method_5((var_4: Rec0), (var_5: float))
Tuple1(var_3, var_6)
