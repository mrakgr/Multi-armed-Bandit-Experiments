module SpiralExample.Main
let cuda_kernels = """
extern "C" {
    
}
"""

type Rec0 =
    | Rec0Case0 of Tuple2
    | Rec0Case1
and Tuple1 =
    struct
    val mem_0: int64
    val mem_1: Rec0
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Tuple2 =
    struct
    val mem_0: Tuple1
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
let rec method_1((var_0: Rec0), (var_1: int64)): int64 =
    match var_0 with
    | Rec0Case0(var_2) ->
        let (var_3: Tuple1) = var_2.mem_0
        let (var_4: int64) = var_3.mem_0
        let (var_5: Rec0) = var_3.mem_1
        let (var_6: int64) = (var_1 + var_4)
        method_1((var_5: Rec0), (var_6: int64))
    | Rec0Case1 ->
        var_1
let (var_0: Rec0) = (Rec0Case0(Tuple2(Tuple1(1L, (Rec0Case0(Tuple2(Tuple1(2L, (Rec0Case0(Tuple2(Tuple1(3L, Rec0Case1))))))))))))
let (var_1: int64) = 0L
method_1((var_0: Rec0), (var_1: int64))
